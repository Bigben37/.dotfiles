set nocompatible                    " no compatibility for very old vim verions

" VimPlug {{{

call plug#begin('~/.vim/plugged')

Plug 'ctrlpvim/ctrlp.vim'           " fuzzy finder
Plug 'jiangmiao/auto-pairs'         " insert or delete brackets, parens, quotes in pair
Plug 'scrooloose/nerdtree'          " file browser tree
Plug 'Xuyuanp/nerdtree-git-plugin'  " nerd tree git support
if v:version >= 800                 " syntax checking
    Plug 'w0rp/ale'
else
    Plug 'vim-syntastic/syntastic'
endif
Plug 'sirver/UltiSnips'             " snippet engine
Plug 'bronson/vim-trailing-whitespace'  " show and fix trialing whitespaces
Plug 'tomtom/tcomment_vim'          " toggle comments
Plug 'haya14busa/incsearch.vim'     " better search

Plug 'sjl/badwolf'                  " color scheme

" Airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" git
Plug 'tpope/vim-fugitive'           " git commands in vim
Plug 'airblade/vim-gitgutter'       " git changes on side

" YouCompleteMe
"Plug 'Valloric/YouCompleteMe', { 'do': './install.py'}

" webdev
Plug 'jwalton512/vim-blade'         " blade (laravel)
Plug 'mattn/emmet-vim'              " emmet
Plug 'alvan/vim-closetag'           " auto complete close tags


call plug#end()                     " required
" }}}

" Colors {{{
set t_Co=256            " set 256 colors
colorscheme badwolf     " colorscheme
syntax enable           " enable syntax processing
" }}}

" Spaces & Tabs {{{
set tabstop=4           " number of visual spaces per TAB
set softtabstop=4       " number of spaces in tab when editing
set expandtab           " tabs are spaces
set shiftwidth=4        " number of space characters inserted for indentation
set smartindent
set autoindent
" }}}

" UI Config {{{
set number              " show line numbers
set showcmd             " show command line in bottom bar
set cursorline          " highlight current line
set colorcolumn=110      " set helper column
filetype plugin indent on
set wildmenu            " visual autocomplete for command menu
set lazyredraw          " redraw only when we need to
set spelllang=en,de
"}}}

" Searching {{{
set incsearch               " search as characters are entered
set hlsearch                " hightlight matches
" incsearch settings
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

"}}}

" Folding {{{
set foldenable              " enable folding
set foldlevelstart=10       " open most folds by default
set foldnestmax=10          " 10 nested fold max
nnoremap <space> za         " space opens/closes folds
set foldmethod=indent       " fold based on indent level
" }}}

" Leader Shortcuts {{{
let mapleader = ","
nnoremap <leader>ev :vsp $MYVIMRC<CR>       " edit vimrc
nnoremap <leader>ez :vsp ~/.zshrc<CR>       " edit zshrc
nnoremap <leader>lv :source $MYVIMRC<CR>    " source vimrc
nnoremap <leader>u :GundoToggle<CR>         " toogle gundo
nnoremap <silent> <leader>se :setlocal spell! spelllang=en_us<CR>   " toogle spell checking
nnoremap <silent> <leader>sg :setlocal spell! spelllang=de_de<CR>   " toogle spell checking
" }}}

" CtrlP {{{
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,solr/**,log/**,*.psd,*.PSD,.git/**,.gitkeep,.gems/**
set wildignore+=*.ico,*.ICO,backup/**,*.sql,*.dump,*.tmp,*.min.js,Gemfile.lock
set wildignore+=*.png,*.PNG,*.JPG,*.jpg,*.JPEG,*.jpeg,*.GIF,*.gif,*.pdf,*.PDF
set wildignore+=vendor/**,coverage/**,tmp/**,rdoc/**,*.BACKUP.*,*.BASE.*,*.LOCAL.*,*.REMOTE.*,.sass-cache/**
let g:ctrlp_match_window = 'bottom,order:ttb'   " match from top to bottom
let g:ctrlp_switch_buffer = 0                   " open files in new buffers
let g:ctrlp_working_path_mode = 0               " allowes to change cwd during session
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
"}}}

" File specific settings {{{
augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
    " autocmd BufWritePre *.php,*.py,*.js,*.txt,*.hs,*.java,*.md
    "                \:call <SID>StripTrailingWhitespaces()
    autocmd FileType python setlocal commentstring=#\ %s
    autocmd BufEnter *.zsh-theme setlocal filetype=zsh
    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd BufEnter *.sh setlocal tabstop=2
    autocmd BufEnter *.sh setlocal shiftwidth=2
    autocmd BufEnter *.sh setlocal softtabstop=2
augroup END
" }}}

" Backups {{{
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup
" }}}

" Airline {{{
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline_theme='badwolf'
" }}}

" NERDTree {{{
map <C-n> :NERDTreeToggle<CR>
" }}}

" UltiSnip {{{
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"
" }}}

nnoremap <F5> :silent make <CR>
cmap w!! w !sudo tee > /dev/null %

let g:instant_markdown_slow = 1

set modelines=1
" vim:foldmethod=marker:foldlevel=0
